#!/usr/bin/env php
<?php

namespace Discommand2\Core;

$myName = basename(__DIR__);

function requireFile(string $path)
{
    if (!file_exists($path)) throw new \Exception("required $path not found");
    require_once($path);
}

function autoLoad()
{
    if (!file_exists(__DIR__ . '/vendor/autoload.php')) {
        echo ("[INFO] composer autoload not found, attempting to install...\n");
        requireFile(__DIR__ . '/composer.php');
        \Discommand2\composer::command(__DIR__, 'install') or throw new \Exception("composer install failed");
    }
    requireFile(__DIR__ . '/vendor/autoload.php');
    return class_exists('\Discommand2\Core\Skull');
}

try {
    autoLoad() or throw new \Exception("failed to autoload");
    $log = LogFactory::create($myName) or throw new \Exception("failed to create log");
} catch (\Exception $e) {
    echo ("[FATAL] " . $e->getMessage() . "\n");
    exit(1);
} catch (\Throwable $e) {
    echo ("[FATAL] " . $e->getMessage() . "\n");
    exit(1);
} catch (\Error $e) {
    echo ("[FATAL] " . $e->getMessage() . "\n");
    exit(1);
}

try {
    $skull = new Skull($log, __DIR__, $myName) or throw new \Exception("failed to create skull");
    $skull->run($argv) or throw new \Exception("skull failed to run");
} catch (\Exception $e) {
    $log->debug($e->getMessage(), ["trace" => $e->getTrace()]);
    $log->error($e->getMessage());
    exit(1);
} catch (\Throwable $e) {
    $log->debug($e->getMessage(), ["trace" => $e->getTrace()]);
    $log->error($e->getMessage());
    exit(1);
} catch (\Error $e) {
    $log->debug($e->getMessage(), ["trace" => $e->getTrace()]);
    $log->error($e->getMessage());
    exit(1);
}
